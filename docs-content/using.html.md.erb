# Using a9s MongoDB

This topic describes how to use a9s MongoDB .

##  <a id='use-a9s-redis-with-an-application'></a> Use a9s MongoDB with an Application

To use a9s MongoDB with an application, create a service instance and bind the service instance to your app. For more information about managing service instances, see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html).

### <a id='view-the-a9s-redis-service'></a>  View the a9s MongoDB Service

After the service is installed, you can see the `a9s-mongodb` and its service plans appear in your CF marketplace. Run `cf marketplace` to see the service listing:
```bash
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service      plans                                           description
a9s-mongodb  mongodb-single-small, mongodb-cluster-small,    This is the anynines mongodb 32 service.
             mongodb-single-big, mongodb-cluster-big
```

### <a id='create-a-service-instance'></a> Create a Service Instance

To provision a MongoDB database, run `cf create-service`.

```bash
$ cf create-service a9s-mongodb mongodb-single-small my-mongodb-service
```

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Run `cf services` to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### <a id='bind-an-application-to-a-service-instance'></a> Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

```bash
$ cf bind-service a9s-mongodb-app my-mongodb-service
```

### <a id='restage-or-restart-your-application'></a> Restage or Restart Your Application

To enable your application to access the service instance, run `cf restage` or `cf restart` to restage or restart your application.

## <a id='obtain-service-instance-access-credentials'></a> Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your MongoDB database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```bash
$ cf env a9s-mongodb-app
Getting env variables for app a9s-mongodb-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-mongodb": [
   {
    "credentials": {
     "default_database": "d22906",
     "dns_servers": [
      "172.28.10.32",
      "172.28.11.11",
      "172.28.12.23"
     ],
     "host_ips": [
      "172.28.25.13:27017"
     ],
     "host": [
      "d67901c.service.dc1.a9s-mongodb-consul:27017"
     ],
     "password": "a9s-brk-usr",
     "username": "a9s-password"
     "uri": "EXAMPLE-URI",
    },
    "label": "a9s-mongodb",
    "name": "my-mongodb-service",
    "plan": "mongodb-single-small",
    "tags": [
     "nosql",
     "database",
     "document store",
     "eventual consistent"
    ]
   }
  ]
 }
}
...
```

You can use the host_ips, username and password values to connect to your database with a MongoDB client.

a9s MongoDB for PCF comes with its own Consul cluster to provide hostname resolving. When your DNS is configured to resolve the a9s MongoDB for PCF service instance domains you can make use of `hosts` or `uri`.
For more information see <a href="./installing.html#name-resolving-with-consul" target="_blank">Name Resolving With Consul</a>.

## <a id='delete-an-a9s-redis-service-instance'></a> Delete an a9s Redis Service Instance

<p class='note warning'><strong>WARNING:</strong> Before deleting a service instance, you must back up data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

### <a id='list-available-services'></a> List Available Services

Run `cf services` to list your available services.

```bash
$ cf services

Getting services in org test / space test as admin...
OK

name                 service       plan                   bound apps        last operation
my-mongodb-service   a9s-mongodb   mongodb-single-small   a9s-mongodb-app   create succeeded
```

This example shows that `my-mongodb-service` is bound to the `a9s-mongodb-app` application.

### <a id='unbind-a-service-instance'></a>Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application.

```bash
$ cf unbind-service a9s-mongodb-app my-mongodb-service
```


### <a id='delete-a-service-instance'></a>Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

```bash
$ cf delete-service my-mongodb-service
```

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


## <a id='upgrade-the-service-instance-to-another-service-plan'></a> Upgrade the Service Instance to Another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM and storage. For more information, see the  [Update a Service Instance](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service) of the _Managing Service Instances with the cf CLI_ topic.

```bash
$ cf update-service my-mongodb-service -p a-bigger-plan
```

Here are the plans you can upgrade to, depending on the one you are currently using:

| Base Plan | Target Plan |
|------|-----------|
| mongodb-single-nano | mongodb-single-small <br> mongodb-single-medium <br> mongodb-single-big <br> mongodb-replica-small <br> mongodb-replica-medium <br> mongodb-replica-big |
| mongodb-single-small | mongodb-single-medium <br> mongodb-single-big <br> mongodb-replica-small <br> mongodb-replica-medium <br> mongodb-replica-big |
| mongodb-single-medium | mongodb-single-big <br> mongodb-replica-medium <br> mongodb-replica-big |
| mongodb-single-big | mongodb-replica-big |
| mongodb-replica-small | mongodb-replica-medium <br> mongodb-replica-big |
| mongodb-replica-medium | mongodb-replica-big |
| mongodb-single-nano-ssl | mongodb-single-small-ssl <br> mongodb-single-medium-ssl <br> mongodb-single-big-ssl <br> mongodb-replica-small-ssl <br> mongodb-replica-medium-ssl <br> mongodb-replica-big-ssl |
| mongodb-single-small-ssl | mongodb-single-medium-ssl <br> mongodb-single-big-ssl <br> mongodb-replica-small-ssl <br> mongodb-replica-medium-ssl <br> mongodb-replica-big-ssl |
| mongodb-single-medium-ssl | mongodb-single-big-ssl <br> mongodb-replica-medium-ssl <br> mongodb-replica-big-ssl |
| mongodb-single-big-ssl | mongodb-replica-big-ssl |
| mongodb-replica-small-ssl | mongodb-replica-medium-ssl <br> mongodb-replica-big-ssl |
| mongodb-replica-medium-ssl | mongodb-replica-big-ssl |

## <a id='add-a-graphite-endpoint'></a> Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to where to information will be sent with the `cf update-service` command. This command expects the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) and a JSON string containing the `graphite` and `metrics_prefix` keys.
Depending on your graphite provider, the `metrics_prefix` might require that each metric must start with an API key in their name. You can also change the interval within the data is send to the endpoint. To do this, modify `interval`; the default is 10s.

```bash
$ cf update-service my-mongodb-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-mongodb", "interval": "5"}'
```

## <a id='add-a-syslog-endpoint'></a> Add a Syslog Endpoint

The `cf update-service` command used with the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key. You can also change the interval for the syslog with the same key than for the graphite endpoint `interval`.

```bash
$ cf update-service my-mongodb-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"], "interval": "5" }'
```

## <a id='cloud-foundry-application-security-groups'></a> Cloud Foundry Application Security Groups

This topic describes how to check whether a security group was created.

Each a9s Data Service will automatically create and update Cloud Foundry security groups in order to protected service instances to be accessed by applications not running in the same Cloud Foundry applications space.
To get a better understanding about Security Groups you can have a look on the
[Understanding Application Security Groups](https://docs.cloudfoundry.org/concepts/asg.html) topic.

### <a id='get-service-instance-guid'></a> Get Service Instance GUID

Run `cf service INSTANCE_NAME --guid` to get the guid of the service instance.

```bash
$ cf service my-mongodb --guid
ca16f111-5073-40b7-973a-156c75dd3028
```

### <a id='check-available-security-groups'></a> Check Available Security Groups

To see all available security groups, run `cf security-groups`.

```
$cf security-groups
Getting security groups as demo@anynines.com
OK

     Name                                         Organization     Space
#0   public_networks
#1   dns
#2   tcp_open
#3   guard_432fb752-876d-443b-a311-a075f4df2237   demonstrations   demo
#4   guard_ca16f111-5073-40b7-973a-156c75dd3028   demonstrations   demo
```

There we can see a security group with the named `guard_ca16f111-5073-40b7-973a-156c75dd3028`
was successfully created.

<p class='note'><strong>Note:</strong> In some circumstances, the connection between the application and the service instance is not possible. In this case, check to see if a security group was created.</p>

## <a id='backup-and-restore-service-instances'></a> Backup and Restore Service Instances

a9s MongoDB provides an easy way to create backups and restore if needed.

### <a id='get-dashboard-address-login-and-authorize'></a> Get Dashboard Address, Log In and Authorize

1. Grap the dashboard URL with `cf service SERVICE-NAME`.
  ```bash
  $cf service my-mongodb

  Service instance: my-mongodb
  Service: a9s-mongodb
  Bound apps:
  Tags:
  Plan: mongodb-single-small
  Description: This is a service creating and managing dedicated MongoDB service instances and clusters, powered by the anynines Service Framework
  Documentation url:
  Dashboard: https://a9s-mongodb-dashboard.aws.ie.a9s.eu/service-instances/ca16f111-5073-40b7-973a-156c75dd3028

  Last Operation
  Status: update succeeded
  Message:
  Started: 2017-10-26T08:28:38Z
  Updated: 2017-10-26T08:28:38Z
  ```

1. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials:
![authentication-page](images/authentication-page.png)

1. Click **Authorize** to approve the authorization request:
![authorization-page](images/authorization-page.png)

### <a id='perform-a-backup'></a> Perform a Backup

On the dashboard, you can trigger a backup by clicking **Trigger backup**

![service-dashboard](images/service-dashboard.png)

After a short period of time the backup will be queued and the backup process will soon start.

![service-dashboard](images/service-dashboard-bkp-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the backup will take some time.</p>

### <a id='restore-a-backup'></a> Restore a Backup

1. Open the dashboard again and select the backup you would like to restore.
1. Click **Restore** and wait for the restore to trigger.

![service-dashboard](images/service-dashboard-restore-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the restore will take some time.</p>

![service-dashboard](images/service-dashboard-final.png)

## <a id='make-a-service-instance-locally-available'></a> Make a Service Instance Locally Available

It is possible to access any of the a9s Data Services locally. You can connect with a local client to the service for any purpose, such as debugging.
CF provides a smart way to create SSH forward tunnels through a pushed application.
For more information about this feature, see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the CF documentation.

First, you must have an application bound to the service. To do this, see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

<p class='note'><strong>Note:</strong> `cf ssh` support must be enabled in the platform. Your administrator can tell you whether it is enabled.</p>

### <a id='get-the-service-url-and-credentials'></a> Get the Service URL and Credentials

You must first follow the procedure in [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) to get the hostname of the service and the user credentials.

```bash
$ cf env a9s-mongodb-app
Getting env variables for app a9s-mongodb-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-mongodb": [
    {
      "credentials": {
       "default_database": "d22906",
       "dns_servers": [
        "172.28.10.32",
        "172.28.11.11",
        "172.28.12.23"
       ],
       "host_ips": [
        "172.28.25.13:27017"
       ],
       "host": [
        "d67901c.service.dc1.a9s-mongodb-consul:27017"
       ],
       "password": "a9s-brk-usr",
       "username": "a9s-password"
       "uri": "EXAMPLE-URI",
     },
     "label": "a9s-mongodb",
     "name": "my-mongodb-service",
     "plan": "mongodb-cluster-small"
    }
   ]
  }
}
...
```

Note the host `d67901c.service.dc1.a9svs`, the username `a9s-brk-usr`, and the password `a9s-password`. You will need these in the next step.

### <a id='create-a-tunnel-to-the-service'></a> Create a Tunnel to The Service

With `cf ssh`,  you can create am SSH forward tunnel to the management dashboard.
Use port `27017` to connect to the a9s Redis Instance.

```bash
$ cf ssh a9s-mongodb-app -L 27017:d67901c.service.dc1.a9svs:27017
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```

When the SSH tunnel is open, you can access the instance using the address `localhost:27017`.

<p class='note'><strong>Note:</strong> Be sure to close the session by running <code>exit</code>.</p>

## <a id="service-keys"></a> Service keys

To gain access to the service manually rather than binding apps to it you can
use service keys.

### <a id="create-a-service-key"></a> Creating a Service Key

To create a key to the service instance `mongodb1` call `nykey` run:

```bash
cf create-service-key mongodb1 mykey
```

### <a id="listing-service-keys"></a> Listing Service Keys

To list all the keys for the `mongodb1` service instance run this:

```bash
cf service-keys mongodb1
```

### <a id="accessing-service-keys"></a> Accessing Service Keys

To obtain the key `mykey` from the `mongodb1` service instance run:

```bash
cf service-key mongodb1 mykey
```

### <a id="deleting-service-keys"></a> Deleting Service Keys

To delete a service key `mykey` from the service instance `mongodb1` run:

```bash
cf delete-service-key mongodb1 mykey
```

## <a id="creating-a-fork-of-a-service-instance"></a> Creating a Fork of a Service Instance

The procedure of forking a service instance involves creating a backup of a
service instance, modifying the backup a bit, and restoring it to a different
service instance.

For this process you will need a service instance you want to fork, and a new
service instance(s) you want to fork to. For help creating new service instances
look at the [Create a Service Instance](#create-a-service-instance) section. You
can get a list of all of your `a9s-mongodb` service instances by running the
following:

```bash
cf s | grep a9s-mongodb
```
The output should be a table of your `a9s-mongodb` instances:

```
mongodb1   a9s-mongodb34   mongodb-nano                create succeeded
mongodb2   a9s-mongodb34   mongodb-nano                create succeeded
```

In this guide we will be forking from `mongodb1` to `mongodb2`.

Now, you have established which service instances you will be operating on, you
will need service keys. For information on creating, obtaining and managing
service keys see the [Service keys](#service-keys) section.

The next thing to do is to log into the service instance dashboard to set the
encryption password (if it hasn't already been set and create a backup. To find
your dashboard URL, for the instance you want to fork from (`mongodb1` in this
example), run this:

```bash
cf service mongodb1 | grep -E '^|dashboard:.*' --color='always'
```

Then log into the dashboard using your Cloud Foundry credentials.

Make sure you set a encryption password for the backups using the service
instance dashboard (`Change Backup Settings`). Create a backup using the
dashboard. Download the backup to your local machine. The filename will be
something like `racsd92baee-1522222422893`.
Decrypt the backup and write its contents to a file:

```shell
$ cat racsd92baee-1522222422893 | openssl enc -aes256 -d -pass 'pass:mytopsecretpassword' > backup.tar
```

For the next steps you will need the mongodb tools. You can install them by
following the [official mongoDB installation manual](https://docs.mongodb.com/manual/installation/).

To upload the backup to the new fork service instance you will need to create a
tunnel, for port 27017, using and app bound to the new service instance. As you
are creating a new instance, that you likely don't want connected to
production until it has the data, its advisable to deploy a small demo app for
tunneling through (you can dispose of it later). A small app can be found here
[https://github.com/anynines/simple_node_mongo_example](https://github.com/anynines/simple_node_mongo_example)
, you will need to edit the manifest, then follow the section [Make a Service Instance Locally Available](#make-a-service-instance-locally-available).

Before the backup data can be restored you must extract it.
```bash
tar -vxf backup.tar
```

Extracting the backup will create a folder that contains the files needed for
the restore. You will see the folder name with the output from the tar command.
The folder name will look something like `racsd92baee-1522222422893`.

To run the restore you will need the credentials for the service instance that
will become a fork. In this example the credentials can be found like this:

```bash
cf service-key mongodb2 mykey
```

Then carry out the restore:

```bash
mongorestore -h localhost:27017 -u mongodb2-mykey-username -p mongodbd2-mykey-password extracted-backup-folder/mongodb1-database/ -d mongodb2-mykey-default_database
```

`mongorestore` will report that it is ignoring files these files concern users
and roles. You can restore users and roles for specific databases in which case
the bson files will not be ignored. For information on restoration commands see
the [Official mongoDB documentation](https://docs.mongodb.com/manual/reference/program/mongorestore/).

Your data has now been restored from one service instance to another. Down
forget to close your ssh tunnel and clean up any temporary app instances, no
longer required keys...
