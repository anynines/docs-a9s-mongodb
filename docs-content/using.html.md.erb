---
title: Using a9s MongoDB for PCF
owner: Partners
---

This topic describes how to use a9s MongoDB for PCF after it has been successfully installed. For more information, see [Installing and Configuring a9s MongoDB for PCF](./installing.html)

##<a id='using'></a>Use a a9s MongoDB for PCF with an Application

To use a9s MongoDB for PCF with an application, create a service instance and bind the service instance
to your application. For more information on managing service instances, see <a href="https://docs.cloudfoundry.org/devguide/services/managing-services.html" target="_blank">Managing Service 
Instances with the CLI</a>.

### View the a9s MongoDB for PCF Service

After the tile is installed, you can see the `a9s-mongodb` and its service plans appear in your PCF marketplace. Run `cf marketplace` to see the service listing:
<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service      plans                                           description
a9s-mongodb  mongodb-single-small, mongodb-cluster-small,    This is the anynines mongodb 32 service.
             mongodb-single-big, mongodb-cluster-big
</pre>

For more information on available service plans, see the [Configure Service Plans](./installing.html#configure-service-instance) topic.

### Create a Service Instance

To provision a MongoDB database, run `cf create-service`, for example:

<pre class="terminal">
$ cf create-service a9s-mongodb mongodb-single-small my-mongodb-service
</pre>

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Check the creation status using `cf services`. This displays a list of all your service instances. To check the status of a specific service instance, 
run `cf service NAME-OF-YOUR-SERVICE`.


### Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

<pre class="terminal">
$ cf bind-service a9s-mongodb-app my-mongodb-service
</pre>

### Restage or Restart Your Application

To enable your application to access the service instance, run `cf restage` or `cf restart` to restage or restart your application.

##<a id='credentials'></a> Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your MongoDB
database is stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables. 

The credentials can be found under
the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env a9s-mongodb-app
Getting env variables for app a9s-mongodb-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-mongodb": [
   {
    "credentials": {
     "default_database": "d22906",
     "hosts": [
      "EXAMPLE-HOST"
     ],
     "password": "EXAMPLE-PASSWORD",
     "uri": "EXAMPLE-URI",
     "username": "EXAMPLE-USERNAME"
    },
    "label": "a9s-mongodb",
    "name": "my-mongodb-service",
    "plan": "mongodb-single-small",
    "tags": [
     "nosql",
     "database",
     "document store",
     "eventual consistent"
    ]
   }
  ]
 }
}
...
</pre>

You can use the host, username and password values to connect to your database with a MongoDB client.

##<a id='deleting'></a> Delete an a9s MongoDB for PCF Service Instance

<p class="note">Before deleting a service instance, you must backup data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, it needs to be unbound from all applications.

### List Available Services

Run `cf service` to list your available services.

<pre class="terminal">
$ cf service

Getting services in org test / space test as admin...
OK

name                 service       plan                   bound apps        last operation
my-mongodb-service   a9s-mongodb   mongodb-single-small   a9s-mongodb-app   create succeeded
</pre>

This example shows that `my-mongodb-service` is bound to the `a9s-mongodb-app` application.

### Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application.

<pre class="terminal">
$ cf unbind-service a9s-mongodb-app my-mongodb-service
</pre>


### Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

<pre class="terminal">
$ cf delete-service my-mongodb-service
</pre>

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to check the deletion status.


##<a id='upgrade-service-plan'></a> Upgrade the Service Instance to another Service Plan

Once created, you have the possibility to upgrade your service instance to
another, bigger service plan; which means that you will get more CPU, RAM and
storage. This is explained in the official <a href="https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service" target="_blank">Cloud Foundry Documentation</a>

<pre class="terminal">
$ cf update-service my-mongodb-service -p a-bigger-plan
</pre>

Here are the plans you can upgrade to depending on the one you are currently
using:

If you are currently using the `mongodb-single-small` plan, you can upgrade to the `mongodb-single-big` plan.

If you are currently using the `mongodb-cluster-small` plan, you can upgrade to the `mongodb-cluster-big` plan.

##<a id='add-graphite-endpoint'></a>Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to
where to information will be sent. This is once again done with the
`update-service` command. This one expect <a href="https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">the -c option</a>
and a JSON string containing the `graphite` and `metrics_prefix` keys.

<pre class="terminal">
$ cf update-service my-mongodb-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-mongo" }'
</pre>

##<a id='add-syslog-endpoint'></a>Add a Syslog Endpoint

The `update-service` command when it is used with <a hef="https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">the -c option</a>,
can let you stream your syslog to a third-party service. For this, the option
expects a JSON string containing the `syslog` key.

<pre class="terminal">
$ cf update-service my-mongodb-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"] }'
</pre>

